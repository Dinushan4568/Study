<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern POS System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>
<body class="bg-gray-100" x-data="posSystem()">
    <!-- Main Container -->
    <div class="min-h-screen flex flex-col">
        <!-- Top Navigation -->
        <nav class="bg-white shadow-lg p-4 flex justify-between items-center">
            <div class="flex items-center space-x-4">
                <h1 class="text-2xl font-bold text-gray-800">POS System</h1>
                <div class="flex space-x-2">
                    <div class="bg-green-100 px-3 py-1 rounded-full">
                        <span class="text-green-700">Sales: $<span x-text="total"></span></span>
                    </div>
                    <div class="bg-blue-100 px-3 py-1 rounded-full">
                        <span class="text-blue-700">Orders: <span x-text="cart.length"></span></span>
                    </div>
                </div>
            </div>
            <div class="flex items-center space-x-4">
                <button class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition">
                    New Order
                </button>
            </div>
        </nav>

        <!-- Main Content -->
        <div class="flex flex-1 overflow-hidden">
            <!-- Product Categories Sidebar -->
            <div class="w-64 bg-white border-r p-4 space-y-2">
                <h3 class="font-semibold text-gray-700 mb-2">Categories</h3>
                <template x-for="category in categories">
                    <button 
                        @click="selectCategory(category)"
                        class="w-full text-left px-4 py-2 rounded hover:bg-gray-50 transition"
                        :class="{'bg-indigo-50 text-indigo-600': selectedCategory === category}"
                        x-text="category">
                    </button>
                </template>
            </div>

            <!-- Product Grid with 3D Preview -->
            <div class="flex-1 overflow-auto p-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                <template x-for="product in filteredProducts" :key="product.id">
                    <div class="bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-300">
                        <!-- 3D Preview Container -->
                        <div 
                            class="h-48 bg-gray-100 rounded-t-xl cursor-pointer"
                            @mouseenter="startProductRotation(product.id)"
                            @mouseleave="stopProductRotation(product.id)"
                            :id="'product-'+product.id">
                        </div>
                        
                        <div class="p-4">
                            <h3 class="font-semibold text-gray-800" x-text="product.name"></h3>
                            <p class="text-gray-600 mt-1" x-text="'$'+product.price"></p>
                            <button 
                                @click="addToCart(product)"
                                class="mt-3 w-full bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition">
                                Add to Cart
                            </button>
                        </div>
                    </div>
                </template>
            </div>

            <!-- Shopping Cart Sidebar -->
            <div class="w-96 bg-white border-l p-4">
                <h3 class="text-xl font-semibold mb-4">Current Order</h3>
                <div class="space-y-4">
                    <template x-for="item in cart" :key="item.id">
                        <div class="flex justify-between items-center bg-gray-50 p-3 rounded-lg">
                            <div>
                                <h4 class="font-medium" x-text="item.name"></h4>
                                <p class="text-sm text-gray-600">
                                    Qty: <span x-text="item.quantity"></span>
                                </p>
                            </div>
                            <div class="text-right">
                                <p x-text="'$'+(item.price * item.quantity).toFixed(2)"></p>
                                <button 
                                    @click="removeFromCart(item.id)"
                                    class="text-red-500 hover:text-red-700 text-sm">
                                    Remove
                                </button>
                            </div>
                        </div>
                    </template>
                </div>
                <div class="mt-6 border-t pt-4">
                    <div class="flex justify-between mb-2">
                        <span class="font-semibold">Total:</span>
                        <span class="font-semibold" x-text="'$'+total"></span>
                    </div>
                    <button class="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition">
                        Process Payment
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        function posSystem() {
            return {
                selectedCategory: 'All',
                categories: ['All', 'Electronics', 'Clothing', 'Groceries', 'Home'],
                cart: [],
                products: [
                    { id: 1, name: 'Wireless Headphones', price: 199.99, category: 'Electronics' },
                    { id: 2, name: 'Smart Watch', price: 299.99, category: 'Electronics' },
                    { id: 3, name: 'Cotton T-Shirt', price: 29.99, category: 'Clothing' },
                    // Add more products...
                ],
                threeJSscenes: {},

                get filteredProducts() {
                    return this.selectedCategory === 'All' 
                        ? this.products 
                        : this.products.filter(p => p.category === this.selectedCategory);
                },

                get total() {
                    return this.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2);
                },

                selectCategory(category) {
                    this.selectedCategory = category;
                },

                addToCart(product) {
                    const existing = this.cart.find(item => item.id === product.id);
                    if (existing) {
                        existing.quantity++;
                    } else {
                        this.cart.push({ ...product, quantity: 1 });
                    }
                },

                removeFromCart(productId) {
                    this.cart = this.cart.filter(item => item.id !== productId);
                },

                startProductRotation(productId) {
                    const container = document.getElementById(`product-${productId}`);
                    if (!this.threeJSscenes[productId]) {
                        this.init3DPreview(productId);
                    }
                    // Start animation
                },

                stopProductRotation(productId) {
                    // Stop animation
                },

                init3DPreview(productId) {
                    const container = document.getElementById(`product-${productId}`);
                    const scene = new THREE.Scene();
                    const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
                    const renderer = new THREE.WebGLRenderer({ alpha: true });
                    
                    renderer.setSize(container.clientWidth, container.clientHeight);
                    container.appendChild(renderer.domElement);

                    const geometry = new THREE.BoxGeometry();
                    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
                    const cube = new THREE.Mesh(geometry, material);
                    scene.add(cube);

                    camera.position.z = 2;

                    const animate = () => {
                        requestAnimationFrame(animate);
                        cube.rotation.x += 0.01;
                        cube.rotation.y += 0.01;
                        renderer.render(scene, camera);
                    };

                    animate();
                    this.threeJSscenes[productId] = { scene, camera, renderer, animate };
                }
            }
        }
    </script>
</body>
</html>